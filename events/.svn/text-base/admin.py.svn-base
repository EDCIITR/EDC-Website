from django.contrib import admin
from django.forms import ModelForm
from django import forms
from events.models import *
from users.models import User
from constants import *
from associates.models import Sponsor
from datetime import datetime
from django.core.exceptions import ObjectDoesNotExist
import hashlib

class EventForm(forms.ModelForm):
   def __init__(self, *args, **kwargs):
        super(EventForm, self).__init__(*args, **kwargs)	
	q = []
	for cat in EventCategory.objects.all():
		if cat.fest:
			q.append(cat)
	
	self.fields['parent'].queryset = Event.objects.filter(category__in=q)
	try:
		pass
	except ObjectDoesNotExist:
		pass
	

class TeamAdminForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        super(TeamAdminForm, self).__init__(*args, **kwargs)
	try:
		self.fields['judge'].queryset = judges = self.instance.event.judges.all()
		
		for judge in judges:
			num = 0
			num = Team.objects.filter(judge=judge,event=self.instance.event).count()
			self.fields['event'].help_text += judge.name + ': ' + str(num) + '<br />'

	except ObjectDoesNotExist:
		pass

class AnnouncementAdminForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        super(AnnouncementAdminForm, self).__init__(*args, **kwargs)
	self.fields['date_added'].initial = datetime.now()
	
class MenuAdmin(admin.ModelAdmin):
	list_display = ('name','url')
	
class GuestInline(admin.TabularInline):
	model = Guest
	extra = 0


class GuestAdmin(admin.ModelAdmin):
	list_display = ('name','email','category','event')
	list_filter = ('event',)
	list_editable = ('category','event','email',)
	search_fields = ('name',)

	
class StageInline(admin.TabularInline):
	model = Stage
	extra = 0

class FAQInline(admin.TabularInline):
	model = FAQ
	extra = 0

class SponsorInline(admin.TabularInline):
	model = Sponsor
	extra = 0

class IncentiveInline(admin.TabularInline):
	model = Incentive
	extra = 0

class AnnouncementInline(admin.TabularInline):
	form = AnnouncementAdminForm
	model = Announcement
	extra = 0
	#readonly_fields = ('contributor',)
	

class AnnouncementAdmin(admin.ModelAdmin):
	form = AnnouncementAdminForm
	list_display = ('announcement','event','date_added',)
	ordering = ('-date_added',)

class EventCategoryAdmin(admin.ModelAdmin):
	list_display = ('name','domain','intro','flagship')

class FieldCategoryAdmin(admin.ModelAdmin):
	list_display = ('name',)

class EventInline(admin.TabularInline):
	model = Event
	extra=0

class EventAdmin(admin.ModelAdmin):
	form = EventForm	
	list_display = ('name','date_event','category','separate')
	list_filter = ('category',)
	ordering = ('-date_event',)
	inlines = [GuestInline,StageInline,FAQInline,SponsorInline,IncentiveInline,AnnouncementInline,EventInline]


#ArthData
class ArthDataAdmin(admin.ModelAdmin):
	list_display = ('team','event')
	list_filter = ('event',)
	#readonly_fields = ('intro','company_overview','product_service','management','market_strategy','financials','viability','offering')
	

class ArthDataInline(admin.TabularInline):
	model = ArthData
	extra = 0
	#readonly_fields = ('intro','company_overview','product_service','management','market_strategy','financials','viability','offering')

#Team
class TeamAdmin(admin.ModelAdmin):
	form = TeamAdminForm	
	list_display = ('name','get_leader','member1','member2','organisation','event','selected','seen','is_judged')
	list_filter = ('event','seen','selected','is_judged')
	actions = ['mark','unmark','select','deselect']
	inlines = [ArthDataInline]
	
	def mark(self,request,queryset):
		rows_updated = queryset.update(seen=True)
		
		if rows_updated==1:
			msg_bit = "1 team was"
		else:
			msg_bit = "%s teams were"%rows_updated
		self.message_user(request,"%s successfully marked as read" % msg_bit)	
	
	def unmark(self,request,queryset):
		rows_updated = queryset.update(seen=False)
		
		if rows_updated==1:
			msg_bit = "1 team was"
		else:
			msg_bit = "%s teams were"%rows_updated
		self.message_user(request,"%s successfully marked as unread" % msg_bit)	

	def select(self,request,queryset):
		rows_updated = queryset.update(selected=True)
		
		if rows_updated==1:
			msg_bit = "1 team was"
		else:
			msg_bit = "%s teams were"%rows_updated
		self.message_user(request,"%s successfully selected" % msg_bit)	

	def deselect(self,request,queryset):
		rows_updated = queryset.update(selected=False)
		
		if rows_updated==1:
			msg_bit = "1 team was"
		else:
			msg_bit = "%s teams were"%rows_updated
		self.message_user(request,"%s successfully deselected" % msg_bit)	
	
	mark.short_description = "Mark as read"
	unmark.short_description = "Mark as unread"
	
class JudgeAdmin(admin.ModelAdmin):
	list_display = ('name','email',)

	#Every judge gets a user entry
	def save_model(self, request, obj, form, change):
		old_obj = None
		cur_email = None
		try:		
			old_obj = Judge.objects.get(pk=obj.id)			
			cur_email = old_obj.email

		except ObjectDoesNotExist:
			pass
		
		new_obj = form.save(commit=False)
		new_email = new_obj.email

		try:
			user = User.objects.get(email=cur_email)
			user.name = new_obj.name
			user.email = new_obj.email
			user.organisation = new_obj.organisation
			user.save()	
		except ObjectDoesNotExist:
			#Does not exist, Add
			password = str(hashlib.sha1(new_obj.email).hexdigest())[:20]
			user = User(name=new_obj.name,email=new_obj.email,organisation=new_obj.organisation,date_registration=datetime.now(),category=USER_JUDGE,password=password)
			user.save()
			#Send mail
		
		obj.save()

class MentorAdmin(admin.ModelAdmin):
	list_display = ('name','email',)

admin.site.register(Announcement,AnnouncementAdmin)
admin.site.register(Event,EventAdmin)
admin.site.register(EventCategory,EventCategoryAdmin)
admin.site.register(Menu,MenuAdmin)
admin.site.register(Team,TeamAdmin)
admin.site.register(FieldCategory,FieldCategoryAdmin)
admin.site.register(Guest,GuestAdmin)
admin.site.register(ArthData,ArthDataAdmin)
admin.site.register(Judge,JudgeAdmin)
admin.site.register(Mentor,MentorAdmin)


